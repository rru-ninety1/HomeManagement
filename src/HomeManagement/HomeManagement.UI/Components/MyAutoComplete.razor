@if (!string.IsNullOrWhiteSpace(selectedItemDescritpion))
{
    <p class="mt-3">
        Selected item is @selectedItemDescritpion with ID <strong>@selectedItemId</strong> focus @onFocus
    </p>
}

<div class="autocomplete w-full">
    <input type="search"
    @bind=selectedItemDescritpion
    @oninput=HandleInput
    @onfocusin=HandleFocusIn
    @onfocusout=HandleFocusOut
           class="w-full rounded-md border border-slate-300 bg-white p-2 shadow-sm placeholder:italic placeholder:text-slate-400 focus:border-violet-700 focus:outline-none focus:ring-1 focus:ring-violet-700 sm:text-sm" />

   @* @if ((onFocus) && (items is not null))*@
    @if (items is not null)
    {
        <ul class="options absolute w-full p-0 left-0 border border-violet-700 rounded-md border-slate-300 bg-white shadow-sm">
            @if (items.Any())
            {
                @foreach (var item in items)
                {
                    <li class="option block p-1 hover:bg-violet-700 hover:text-white" @onclick=@(_ => SelectItem(item.Id))>
                        <span class="option-text">@item.Description</span>
                    </li>
                }
            }
            else
            {
                <li class="disabled option p-1">Nessun risultato</li>
            }
        </ul>
    }
</div>



@code
{
    private AutocompleteItem[] _values = new AutocompleteItem[]
        {
            new AutocompleteItem
            {
                Id="1",
                Description="primo"
            },
            new AutocompleteItem
            {
                Id="2",
                Description="pri secondo"
            },
            new AutocompleteItem
            {
                Id="3",
                Description="terzo"
            },
             new AutocompleteItem
            {
                Id="4",
                Description="pri 4"
            },
              new AutocompleteItem
            {
                Id="5",
                Description="pri 5"
            },
              new AutocompleteItem
            {
                Id="6",
                Description="pri 6"
            },
              new AutocompleteItem
            {
                Id="7",
                Description="pri 7"
            },
        };

    List<AutocompleteItem>? items;
    string selectedItemId;
    string selectedItemDescritpion;
    string filter;
    bool onFocus = false;

    void HandleInput(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();

        if (filter?.Length > 1)
        {
            items = _values.Where(x => x.Description.StartsWith(filter))
                .Take(5)
                .ToList();

            selectedItemId = null;
        }
        else
        {
            items = null;
            selectedItemDescritpion = selectedItemId = null;
        }
    }

    void HandleFocusIn()
    {
        onFocus = true;
    }

    void HandleFocusOut()
    {
        if ((selectedItemId == null) && (items != null) && (items.Count == 1) && (items[0].Description == selectedItemDescritpion))
        {
            selectedItemId = items[0].Id;
        }

        onFocus = false;
    }

    void SelectItem(string id)
    {
        selectedItemId = id;
        selectedItemDescritpion = items!.First(c => c.Id.Equals(selectedItemId)).Description;
        items = null;
    }

    internal class AutocompleteItem
    {
        public string Id { get; set; }
        public string Description { get; set; }
    }
}

<style>
    .autocomplete {
        position: relative;
    }

        .autocomplete .options {
            /*position: absolute;*/
            top: 44px;
            /*left: 0;*/
            /*background: white;*/
            /*width: 100%;*/
            z-index: 10;
            /*  border: 1px solid #ced4da;
                                            border-radius: 0.5rem;
                                            box-shadow: 0 30px 25px 8px rgba(0, 0, 0, 0.1);*/
        }

        .autocomplete .option {
            /*display: block;*/
            /*padding: 0.25rem;*/
        }

            .autocomplete .option .option-text {
                padding: 0.25rem 0.5rem;
            }

            .autocomplete .option:hover {
                /*background: #1E90FF;*/
                /*color: #fff;*/
            }

            .autocomplete .option.disabled {
                background-color: lightgrey;
                cursor: not-allowed;
            }

                .autocomplete .option.disabled:hover {
                    background: lightgrey;
                    color: var(--bs-body);
                }
</style>