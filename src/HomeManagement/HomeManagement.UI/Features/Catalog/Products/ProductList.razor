@using HomeManagement.Business.Catalog.Products;
@using HomeManagement.Business.Common.Interfaces;
@using HomeManagement.Core.Catalog;

@inject NavigationManager NavigationManager
@inject IDispacher Dispacher
@inject IDialogService DialogService

<SeachBarComponent @bind-Value="searchProduct" />

<div class="pt-36 pb-16 px-3 flex flex-col space-y-2 z-0 items-center mx-auto">

    <NewListItemComponent OnClick="()=>OnProductClick(null)" />

    @foreach (Product item in FilteredProductItems)
    {
        <ListItemComponent OnClick="() => OnProductClick(item)">
            <ItemModel>
                <h3 class="flex item-center text-sm font-semibold text-gray-900">@item.Description</h3>
            </ItemModel>
        </ListItemComponent>
    }
</div>

@code
{
    protected override async Task OnInitializedAsync()
    {
        var readProductResult = await Dispacher.SendQuery(new ProductListQuery());
        if (readProductResult.Success)
        {
            ProductItems = readProductResult.Content;
        }
        else
        {
            await DialogService.DisplayAlert("Errore lettura prodotti", readProductResult.ErrorMessage, "Ok")
               .ConfigureAwait(false);
            ProductItems = Enumerable.Empty<Product>();
        }
    }

    private string searchProduct;

    private IEnumerable<Product> ProductItems;
    private IEnumerable<Product> FilteredProductItems => string.IsNullOrWhiteSpace(searchProduct) ? ProductItems : ProductItems.Where(c => c.Description.Contains(searchProduct, StringComparison.InvariantCultureIgnoreCase));

    private void OnProductClick(Product selectedProduct)
    {
        if (selectedProduct != null)
        {
            NavigationManager.NavigateTo("product/" + selectedProduct.Id);
        }
        else
        {
            NavigationManager.NavigateTo("product");
        }
    }
}